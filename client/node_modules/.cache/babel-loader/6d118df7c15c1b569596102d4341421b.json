{"ast":null,"code":"var _jsxFileName = \"/Users/bickeymanandhar/Downloads/SpendingTracker/client/src/components/Main/Form/Ocr.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Box, Button } from '@mui/material';\nimport { useDropzone } from 'react-dropzone';\nimport Tesseract from 'tesseract.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Ocr(_ref) {\n  _s();\n\n  let {\n    setDataOject,\n    setSpinnerMode\n  } = _ref;\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [image, setImage] = useState(false);\n  const [error, setError] = React.useState(null);\n  React.useEffect(() => {\n    if (image) {\n      setSpinnerMode(true);\n    } else {\n      setSpinnerMode(false);\n    }\n\n    if (error) {\n      console.log(error);\n    }\n  }, [error, image]);\n  useEffect(() => {\n    setImage(true); // TODO Regex Expressions Start\n\n    let monthDayYear = /\\d{1,2}[\\- \\/ \\.]\\d{1,2}[\\- \\/ \\.]\\d{2,4}/gi;\n    let engDate = /[a-z]+[ 0-9]+[,][ ]\\d{2,4}/gi;\n    let totalAmount = /[total amount]+\\$[0-9]*[.]?[0-9]+/gi;\n    let payment = /[payment: ]+\\$[0-9]*[.]?[0-9]+/gi; // TODO Regex Expressions End\n\n    Tesseract.recognize(selectedImage, 'eng').then(_ref2 => {\n      let {\n        data: {\n          text\n        }\n      } = _ref2;\n      var arrTAmount = text.match(totalAmount);\n      var arrPayment = text.match(payment);\n      var arrDate = text.match(monthDayYear);\n      let engArrDate = text.match(engDate);\n      let TA = arrTAmount.find(el => el.match('TOTAL'));\n      let T = arrTAmount.find(el => el.match('Total'));\n      let P = arrPayment.find(el => el.match('Payment'));\n\n      if (P) {\n        var words = P.split(' ');\n        let lastElement = words[words.length - 1];\n        let value = lastElement.match(/[0-9]*[.]?[0-9]+/gi);\n        let obj = {\n          value,\n          arrDate: engArrDate ? engArrDate : arrDate || []\n        };\n        setDataOject(obj);\n      }\n\n      if (TA) {\n        var words = TA.split(' ');\n        let lastElement = words[words.length - 1];\n        let value = lastElement.match(/[0-9]*[.]?[0-9]+/gi);\n        let obj = {\n          value,\n          arrDate: engArrDate ? engArrDate : arrDate || []\n        };\n        setDataOject(obj);\n      }\n\n      if (T) {\n        var words = T.split(' ');\n        let lastElement = words[words.length - 1];\n        let value = lastElement.match(/[0-9]*[.]?[0-9]+/gi);\n        let obj = {\n          value,\n          arrDate: engArrDate ? engArrDate : arrDate || []\n        };\n        setDataOject(obj);\n      }\n\n      setImage(false);\n    }).catch(error => {\n      setImage(false);\n      console.log(error, 'error');\n    });\n  }, [selectedImage]);\n  const onDrop = useCallback((acceptedFiles, rejectedFiles) => {\n    if (rejectedFiles.length > 0) {\n      rejectedFiles.forEach(_ref3 => {\n        let {\n          file,\n          errors\n        } = _ref3;\n        errors.forEach(error => {\n          if (error.code === 'file-invalid-type') setError(`${file.name}: File type is not supported.`);else if (error.code === 'too-many-files') setError(`Only one image accepted!.`);else setError(error.message);\n        });\n      });\n    }\n\n    if (rejectedFiles.length < 1) {\n      setSelectedImage(acceptedFiles[0]);\n      setImage(true);\n    }\n  }, []);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop,\n    accept: 'image/*',\n    maxFiles: 1\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps(),\n        children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          bgcolor: '#fff',\n          borderRadius: 1,\n          p: 1,\n          color: 'black',\n          fontWeight: 'bold',\n          sx: {\n            cursor: 'pointer'\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            sx: {\n              color: 'black'\n            },\n            children: \"Add Transaction Via Picture\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Ocr, \"bmNscE8g7SQZQ6mCWljutVAgefM=\", false, function () {\n  return [useDropzone];\n});\n\n_c = Ocr;\nexport default Ocr;\n\nvar _c;\n\n$RefreshReg$(_c, \"Ocr\");","map":{"version":3,"sources":["/Users/bickeymanandhar/Downloads/SpendingTracker/client/src/components/Main/Form/Ocr.js"],"names":["React","useState","useEffect","useCallback","Box","Button","useDropzone","Tesseract","Ocr","setDataOject","setSpinnerMode","selectedImage","setSelectedImage","image","setImage","error","setError","console","log","monthDayYear","engDate","totalAmount","payment","recognize","then","data","text","arrTAmount","match","arrPayment","arrDate","engArrDate","TA","find","el","T","P","words","split","lastElement","length","value","obj","catch","onDrop","acceptedFiles","rejectedFiles","forEach","file","errors","code","name","message","getRootProps","getInputProps","accept","maxFiles","cursor","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport { Box, Button } from '@mui/material'\nimport { useDropzone } from 'react-dropzone'\nimport Tesseract from 'tesseract.js'\n\nfunction Ocr({ setDataOject, setSpinnerMode }) {\n  const [selectedImage, setSelectedImage] = useState(null)\n  const [image, setImage] = useState(false)\n  const [error, setError] = React.useState(null)\n\n  React.useEffect(() => {\n    if (image) {\n      setSpinnerMode(true)\n    } else {\n      setSpinnerMode(false)\n    }\n\n    if (error) {\n      console.log(error)\n    }\n  }, [error, image])\n\n  useEffect(() => {\n    setImage(true)\n    // TODO Regex Expressions Start\n    let monthDayYear = /\\d{1,2}[\\- \\/ \\.]\\d{1,2}[\\- \\/ \\.]\\d{2,4}/gi\n    let engDate = /[a-z]+[ 0-9]+[,][ ]\\d{2,4}/gi\n    let totalAmount = /[total amount]+\\$[0-9]*[.]?[0-9]+/gi\n    let payment = /[payment: ]+\\$[0-9]*[.]?[0-9]+/gi\n    // TODO Regex Expressions End\n\n    Tesseract.recognize(selectedImage, 'eng')\n      .then(({ data: { text } }) => {\n\n        var arrTAmount = text.match(totalAmount)\n        var arrPayment = text.match(payment)\n        var arrDate = text.match(monthDayYear)\n        let engArrDate = text.match(engDate)\n\n        let TA = arrTAmount.find((el) => el.match('TOTAL'))\n        let T = arrTAmount.find((el) => el.match('Total'))\n        let P = arrPayment.find((el) => el.match('Payment'))\n\n        if (P) {\n          var words = P.split(' ')\n          let lastElement = words[words.length - 1]\n          let value = lastElement.match(/[0-9]*[.]?[0-9]+/gi)\n\n          let obj = { value, arrDate: engArrDate ? engArrDate : arrDate || [] }\n          setDataOject(obj)\n        }\n\n        if (TA) {\n          var words = TA.split(' ')\n          let lastElement = words[words.length - 1]\n          let value = lastElement.match(/[0-9]*[.]?[0-9]+/gi)\n\n          let obj = { value, arrDate: engArrDate ? engArrDate : arrDate || [] }\n          setDataOject(obj)\n        }\n\n        if (T) {\n          var words = T.split(' ')\n          let lastElement = words[words.length - 1]\n          let value = lastElement.match(/[0-9]*[.]?[0-9]+/gi)\n\n          let obj = { value, arrDate: engArrDate ? engArrDate : arrDate || [] }\n          setDataOject(obj)\n        }\n        setImage(false)\n      })\n      .catch((error) => {\n        setImage(false)\n        console.log(error, 'error')\n      })\n  }, [selectedImage])\n\n  const onDrop = useCallback((acceptedFiles, rejectedFiles) => {\n    if (rejectedFiles.length > 0) {\n      rejectedFiles.forEach(({ file, errors }) => {\n        errors.forEach((error) => {\n          if (error.code === 'file-invalid-type')\n            setError(`${file.name}: File type is not supported.`)\n          else if (error.code === 'too-many-files')\n            setError(`Only one image accepted!.`)\n          else setError(error.message)\n        })\n      })\n    }\n    if (rejectedFiles.length < 1) {\n      setSelectedImage(acceptedFiles[0])\n      setImage(true)\n    }\n  }, [])\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop,\n    accept: 'image/*',\n    maxFiles: 1,\n  })\n\n  return (\n    <div>\n      <section>\n        <div {...getRootProps()}>\n          <input {...getInputProps()} />\n          <Box\n            bgcolor={'#fff'}\n            borderRadius={1}\n            p={1}\n            color={'black'}\n            fontWeight={'bold'}\n            sx={{ cursor: 'pointer' }}\n          >\n            <Button sx={{ color: 'black' }}>Add Transaction Via Picture</Button>\n          </Box>\n        </div>\n      </section>\n    </div>\n  )\n}\n\nexport default Ocr\n"]},"metadata":{},"sourceType":"module"}