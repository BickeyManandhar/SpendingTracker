{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContext } from \"react\";\nimport { ExpenseTrackerContext } from \"./context/context\";\nimport { incomeCategories, expenseCategories, resetCategories } from \"./constants/categories\";\n\nconst useTransactions = (startDate, endDate, title) => {\n  _s();\n\n  resetCategories();\n  const {\n    transactions\n  } = useContext(ExpenseTrackerContext);\n  const rightTransactions = transactions.filter(t => t.type === title);\n  const total = rightTransactions.reduce((acc, currVal) => acc += currVal.amount, 0);\n  const categories = title === \"Income\" ? incomeCategories : expenseCategories;\n  rightTransactions.forEach(t => {\n    const category = categories.find(c => c.type === t.category);\n\n    if (category) {\n      category.amount += t.amount;\n      category.date = t.date;\n    }\n  });\n  const filteredCategories = categories.filter(sc => sc.amount > 0);\n  const chartData = {\n    datasets: [{\n      data: filteredCategories.map(c => c.amount),\n      backgroundColor: filteredCategories.map(c => c.color)\n    }],\n    labels: filteredCategories.map(c => c.type)\n  };\n  let date = new Date();\n  let day = date.getUTCDate();\n  var preDate = new Date();\n  preDate.setUTCDate(day);\n  preDate.setUTCMonth(preDate.getUTCMonth());\n  let monthlyData = filteredCategories.filter(item => {\n    return item.date >= startDate && item.date <= endDate;\n  });\n  const monthlyTotal = monthlyData.reduce((acc, currVal) => acc += currVal.amount, 0);\n  const barData = {\n    datasets: [{\n      label: monthlyData.map(c => c.type),\n      data: monthlyData.map(c => c.amount),\n      backgroundColor: monthlyData.map(c => c.color)\n    }],\n    labels: monthlyData.map(c => c.type)\n  };\n  return {\n    filteredCategories,\n    total,\n    monthlyTotal,\n    chartData,\n    barData\n  };\n};\n\n_s(useTransactions, \"Ni2LnfH2vyq3Bhy/VEUHhQfs92s=\");\n\nexport default useTransactions;","map":{"version":3,"sources":["/Users/bickeymanandhar/Downloads/SpendingTracker/client/src/useTransactions.js"],"names":["useContext","ExpenseTrackerContext","incomeCategories","expenseCategories","resetCategories","useTransactions","startDate","endDate","title","transactions","rightTransactions","filter","t","type","total","reduce","acc","currVal","amount","categories","forEach","category","find","c","date","filteredCategories","sc","chartData","datasets","data","map","backgroundColor","color","labels","Date","day","getUTCDate","preDate","setUTCDate","setUTCMonth","getUTCMonth","monthlyData","item","monthlyTotal","barData","label"],"mappings":"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","sourcesContent":["import { useContext } from \"react\";\r\nimport { ExpenseTrackerContext } from \"./context/context\";\r\n\r\nimport {\r\n  incomeCategories,\r\n  expenseCategories,\r\n  resetCategories,\r\n} from \"./constants/categories\";\r\n\r\nconst useTransactions = (startDate, endDate, title) => {\r\n  resetCategories();\r\n  const { transactions } = useContext(ExpenseTrackerContext);\r\n  const rightTransactions = transactions.filter((t) => t.type === title);\r\n  const total = rightTransactions.reduce(\r\n    (acc, currVal) => (acc += currVal.amount),\r\n    0\r\n  );\r\n  const categories = title === \"Income\" ? incomeCategories : expenseCategories;\r\n\r\n  rightTransactions.forEach((t) => {\r\n    const category = categories.find((c) => c.type === t.category);\r\n\r\n    if (category) {\r\n      category.amount += t.amount;\r\n      category.date = t.date;\r\n    }\r\n  });\r\n\r\n  const filteredCategories = categories.filter((sc) => sc.amount > 0);\r\n\r\n  const chartData = {\r\n    datasets: [\r\n      {\r\n        data: filteredCategories.map((c) => c.amount),\r\n        backgroundColor: filteredCategories.map((c) => c.color),\r\n      },\r\n    ],\r\n    labels: filteredCategories.map((c) => c.type),\r\n  };\r\n  let date = new Date();\r\n  let day = date.getUTCDate();\r\n\r\n  var preDate = new Date();\r\n  preDate.setUTCDate(day);\r\n  preDate.setUTCMonth(preDate.getUTCMonth());\r\n  let monthlyData = filteredCategories.filter((item) => {\r\n\r\n    return item.date >= startDate && item.date <= endDate\r\n\r\n  });\r\n\r\n  const monthlyTotal = monthlyData.reduce(\r\n    (acc, currVal) => (acc += currVal.amount),\r\n    0\r\n  );\r\n\r\n  const barData = {\r\n    datasets: [\r\n      {\r\n        label: monthlyData.map((c) => c.type),\r\n        data: monthlyData.map((c) => c.amount),\r\n        backgroundColor: monthlyData.map((c) => c.color),\r\n      },\r\n    ],\r\n    labels: monthlyData.map((c) => c.type),\r\n  };\r\n\r\n  return { filteredCategories, total, monthlyTotal, chartData, barData };\r\n};\r\n\r\nexport default useTransactions;\r\n"]},"metadata":{},"sourceType":"module"}