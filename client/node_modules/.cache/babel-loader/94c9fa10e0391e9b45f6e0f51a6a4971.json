{"ast":null,"code":"var _jsxFileName = \"/Users/bickeymanandhar/Downloads/SpendingTracker/client/src/components/Main/Form/Form.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { TextField, Typography, Grid, Button, FormControl, InputLabel, Select, MenuItem } from \"@material-ui/core\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { useSpeechContext } from \"@speechly/react-client\";\nimport Snackbar from \"../../Snackbar/Snackbar\";\nimport formatDate from \"../../../utils/formatDate\";\nimport { ExpenseTrackerContext } from \"../../../context/context\";\nimport { incomeCategories, expenseCategories } from \"../../../constants/categories\";\nimport useStyles from \"./styles\";\nimport { Box } from \"@mui/material\";\nimport Ocr from \"./Ocr\";\nimport Spinner from \"../../Spinner/Spinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  amount: \"\",\n  category: \"\",\n  type: \"Income\",\n  date: formatDate(new Date().toUTCString())\n};\n\nconst NewTransactionForm = () => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    addTransaction\n  } = useContext(ExpenseTrackerContext);\n  const [formData, setFormData] = useState(initialState);\n  const {\n    segment\n  } = useSpeechContext();\n  const [open, setOpen] = React.useState(false);\n  const [spinnerMode, setSpinnerMode] = React.useState(false);\n  const [dataOject, setDataOject] = React.useState(null);\n  const [errorText, setErrorText] = React.useState(\"\");\n  const [catText, setCatText] = React.useState(\"\");\n\n  const createTransaction = () => {\n    let catRegex = /[a-z0-9]/gi;\n\n    if (catRegex.test(formData.category) === false) {\n      setCatText(\"Category is required\");\n      return;\n    }\n\n    let amountRegex = /([1-9]*[.])?[1-9]+/gi;\n\n    if (amountRegex.test(formData.amount) === false || !formData.date.includes(\"-\")) {\n      setErrorText(\"Amount is not correct\");\n      return;\n    }\n\n    if (incomeCategories.map(iC => iC.type).includes(formData.category)) {\n      setFormData({ ...formData,\n        type: \"Income\"\n      });\n    } else if (expenseCategories.map(iC => iC.type).includes(formData.category)) {\n      setFormData({ ...formData,\n        type: \"Expense\"\n      });\n    }\n\n    setOpen(true);\n    addTransaction({ ...formData,\n      amount: Number(formData.amount),\n      id: uuidv4()\n    });\n    setFormData(initialState);\n    setErrorText(\"\");\n    setCatText(\"\");\n  };\n\n  const amountFun = value => {\n    let regexValue = /([0-9]*[.])?[0-9]+/gi.test(value);\n\n    if (regexValue) {\n      setFormData({ ...formData,\n        amount: value\n      });\n    } else {\n      setFormData({ ...formData,\n        amount: \"\"\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (segment) {\n      if (segment.intent.intent === \"add_expense\") {\n        setFormData({ ...formData,\n          type: \"Expense\"\n        });\n      } else if (segment.intent.intent === \"add_income\") {\n        setFormData({ ...formData,\n          type: \"Income\"\n        });\n      } else if (segment.isFinal && segment.intent.intent === \"create_transaction\") {\n        return createTransaction();\n      } else if (segment.isFinal && segment.intent.intent === \"cancel_transaction\") {\n        return setFormData(initialState);\n      }\n\n      segment.entities.forEach(s => {\n        const category = `${s.value.charAt(0)}${s.value.slice(1).toLowerCase()}`;\n\n        switch (s.type) {\n          case \"amount\":\n            setFormData({ ...formData,\n              amount: s.value\n            });\n            break;\n\n          case \"category\":\n            if (incomeCategories.map(iC => iC.type).includes(category)) {\n              setFormData({ ...formData,\n                type: \"Income\",\n                category\n              });\n            } else if (expenseCategories.map(iC => iC.type).includes(category)) {\n              setFormData({ ...formData,\n                type: \"Expense\",\n                category\n              });\n            }\n\n            break;\n\n          case \"date\":\n            setFormData({ ...formData,\n              date: s.value\n            });\n            break;\n\n          default:\n            break;\n        }\n      });\n\n      if (segment.isFinal && formData.amount && formData.category && formData.type && formData.date) {\n        createTransaction();\n      }\n    }\n\n    if (dataOject) {\n      if (dataOject !== null && dataOject !== void 0 && dataOject.arrDate[0]) {\n        var dd = new Date(dataOject === null || dataOject === void 0 ? void 0 : dataOject.arrDate[0]);\n        dd.setUTCDate(dd.getUTCDate() + 1);\n      }\n\n      setFormData({ ...formData,\n        amount: dataOject !== null && dataOject !== void 0 && dataOject.value[0] ? dataOject === null || dataOject === void 0 ? void 0 : dataOject.value[0] : \"\",\n        date: formatDate(dataOject !== null && dataOject !== void 0 && dataOject.arrDate[0] ? dd : formatDate(new Date().toUTCString()))\n      });\n    }\n  }, [dataOject, segment]);\n  const selectedCategories = formData.type === \"Income\" ? incomeCategories : expenseCategories;\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 2,\n    children: [/*#__PURE__*/_jsxDEV(Snackbar, {\n      open: open,\n      setOpen: setOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Spinner, {\n      spinnerMode: spinnerMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        justifyContent: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Ocr, {\n          setDataOject: setDataOject,\n          setSpinnerMode: setSpinnerMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        variant: \"subtitle2\",\n        gutterBottom: true,\n        children: segment ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"segment\",\n          children: segment.words.map(w => w.value).join(\" \")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          children: \"Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          value: formData.type,\n          onChange: e => setFormData({ ...formData,\n            type: e.target.value\n          }),\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"Income\",\n            children: \"Income\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"Expense\",\n            children: \"Expense\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6,\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          children: \"Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          value: formData.category,\n          onChange: e => setFormData({ ...formData,\n            category: e.target.value\n          }),\n          children: selectedCategories.map(c => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: c.type,\n            children: c.type\n          }, c.type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        style: {\n          marginLeft: 7,\n          color: \"red\",\n          fontSize: \"12px\"\n        },\n        children: catText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        type: \"text\",\n        label: \"Amount\",\n        value: formData.amount,\n        onChange: e => amountFun(e.target.value),\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        label: \"Date\",\n        type: \"date\",\n        value: formData.date,\n        onChange: e => setFormData({ ...formData,\n          date: formatDate(e.target.value)\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      style: {\n        marginLeft: 7,\n        color: \"red\",\n        fontSize: \"12px\"\n      },\n      children: errorText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: classes.button,\n      variant: \"outlined\",\n      color: \"primary\",\n      fullWidth: true,\n      onClick: createTransaction,\n      children: \"Create\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewTransactionForm, \"VKc0JEwKce5iELh+U98AcxfyRg4=\", false, function () {\n  return [useStyles, useSpeechContext];\n});\n\n_c = NewTransactionForm;\nexport default NewTransactionForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewTransactionForm\");","map":{"version":3,"sources":["/Users/bickeymanandhar/Downloads/SpendingTracker/client/src/components/Main/Form/Form.jsx"],"names":["React","useState","useContext","useEffect","TextField","Typography","Grid","Button","FormControl","InputLabel","Select","MenuItem","v4","uuidv4","useSpeechContext","Snackbar","formatDate","ExpenseTrackerContext","incomeCategories","expenseCategories","useStyles","Box","Ocr","Spinner","initialState","amount","category","type","date","Date","toUTCString","NewTransactionForm","classes","addTransaction","formData","setFormData","segment","open","setOpen","spinnerMode","setSpinnerMode","dataOject","setDataOject","errorText","setErrorText","catText","setCatText","createTransaction","catRegex","test","amountRegex","includes","map","iC","Number","id","amountFun","value","regexValue","intent","isFinal","entities","forEach","s","charAt","slice","toLowerCase","arrDate","dd","setUTCDate","getUTCDate","selectedCategories","words","w","join","e","target","c","marginLeft","color","fontSize","button"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\r\nimport {\r\n  TextField,\r\n  Typography,\r\n  Grid,\r\n  Button,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport { useSpeechContext } from \"@speechly/react-client\";\r\nimport Snackbar from \"../../Snackbar/Snackbar\";\r\nimport formatDate from \"../../../utils/formatDate\";\r\nimport { ExpenseTrackerContext } from \"../../../context/context\";\r\nimport {\r\n  incomeCategories,\r\n  expenseCategories,\r\n} from \"../../../constants/categories\";\r\nimport useStyles from \"./styles\";\r\nimport { Box } from \"@mui/material\";\r\nimport Ocr from \"./Ocr\";\r\nimport Spinner from \"../../Spinner/Spinner\";\r\n\r\nconst initialState = {\r\n  amount: \"\",\r\n  category: \"\",\r\n  type: \"Income\",\r\n  date: formatDate(new Date().toUTCString()),\r\n};\r\n\r\nconst NewTransactionForm = () => {\r\n  const classes = useStyles();\r\n  const { addTransaction } = useContext(ExpenseTrackerContext);\r\n  const [formData, setFormData] = useState(initialState);\r\n  const { segment } = useSpeechContext();\r\n  const [open, setOpen] = React.useState(false);\r\n  const [spinnerMode, setSpinnerMode] = React.useState(false);\r\n  const [dataOject, setDataOject] = React.useState(null);\r\n  const [errorText, setErrorText] = React.useState(\"\");\r\n  const [catText, setCatText] = React.useState(\"\");\r\n\r\n  const createTransaction = () => {\r\n    let catRegex = /[a-z0-9]/gi;\r\n    if (catRegex.test(formData.category) === false) {\r\n      setCatText(\"Category is required\");\r\n      return;\r\n    }\r\n\r\n    let amountRegex = /([1-9]*[.])?[1-9]+/gi;\r\n\r\n    if (\r\n      amountRegex.test(formData.amount) === false ||\r\n      !formData.date.includes(\"-\")\r\n    ) {\r\n      setErrorText(\"Amount is not correct\");\r\n      return;\r\n    }\r\n\r\n    if (incomeCategories.map((iC) => iC.type).includes(formData.category)) {\r\n      setFormData({ ...formData, type: \"Income\" });\r\n    } else if (\r\n      expenseCategories.map((iC) => iC.type).includes(formData.category)\r\n    ) {\r\n      setFormData({ ...formData, type: \"Expense\" });\r\n    }\r\n\r\n    setOpen(true);\r\n    addTransaction({\r\n      ...formData,\r\n      amount: Number(formData.amount),\r\n      id: uuidv4(),\r\n    });\r\n    setFormData(initialState);\r\n    setErrorText(\"\");\r\n    setCatText(\"\");\r\n  };\r\n\r\n  const amountFun = (value) => {\r\n    let regexValue = /([0-9]*[.])?[0-9]+/gi.test(value);\r\n\r\n    if (regexValue) {\r\n      setFormData({\r\n        ...formData,\r\n        amount: value,\r\n      });\r\n    } else {\r\n      setFormData({\r\n        ...formData,\r\n        amount: \"\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (segment) {\r\n      if (segment.intent.intent === \"add_expense\") {\r\n        setFormData({ ...formData, type: \"Expense\" });\r\n      } else if (segment.intent.intent === \"add_income\") {\r\n        setFormData({ ...formData, type: \"Income\" });\r\n      } else if (\r\n        segment.isFinal &&\r\n        segment.intent.intent === \"create_transaction\"\r\n      ) {\r\n        return createTransaction();\r\n      } else if (\r\n        segment.isFinal &&\r\n        segment.intent.intent === \"cancel_transaction\"\r\n      ) {\r\n        return setFormData(initialState);\r\n      }\r\n\r\n      segment.entities.forEach((s) => {\r\n        const category = `${s.value.charAt(0)}${s.value\r\n          .slice(1)\r\n          .toLowerCase()}`;\r\n\r\n        switch (s.type) {\r\n          case \"amount\":\r\n            setFormData({ ...formData, amount: s.value });\r\n            break;\r\n          case \"category\":\r\n            if (incomeCategories.map((iC) => iC.type).includes(category)) {\r\n              setFormData({ ...formData, type: \"Income\", category });\r\n            } else if (\r\n              expenseCategories.map((iC) => iC.type).includes(category)\r\n            ) {\r\n              setFormData({ ...formData, type: \"Expense\", category });\r\n            }\r\n            break;\r\n          case \"date\":\r\n            setFormData({ ...formData, date: s.value });\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      });\r\n\r\n      if (\r\n        segment.isFinal &&\r\n        formData.amount &&\r\n        formData.category &&\r\n        formData.type &&\r\n        formData.date\r\n      ) {\r\n        createTransaction();\r\n      }\r\n    }\r\n\r\n    if (dataOject) {\r\n      if (dataOject?.arrDate[0]) {\r\n        var dd = new Date(dataOject?.arrDate[0]);\r\n        dd.setUTCDate(dd.getUTCDate() + 1);\r\n      }\r\n\r\n      setFormData({\r\n        ...formData,\r\n        amount: dataOject?.value[0] ? dataOject?.value[0] : \"\",\r\n        date: formatDate(\r\n          dataOject?.arrDate[0] ? dd : formatDate(new Date().toUTCString())\r\n        ),\r\n      });\r\n    }\r\n  }, [dataOject, segment]);\r\n\r\n  const selectedCategories =\r\n    formData.type === \"Income\" ? incomeCategories : expenseCategories;\r\n\r\n  return (\r\n    <Grid container spacing={2}>\r\n      <Snackbar open={open} setOpen={setOpen} />\r\n      <Spinner spinnerMode={spinnerMode} />\r\n      <Grid item xs={12}>\r\n        <Box display={\"flex\"} justifyContent={\"center\"}>\r\n          <Ocr setDataOject={setDataOject} setSpinnerMode={setSpinnerMode} />\r\n        </Box>\r\n        <Typography align=\"center\" variant=\"subtitle2\" gutterBottom>\r\n          {segment ? (\r\n            <div className=\"segment\">\r\n              {segment.words.map((w) => w.value).join(\" \")}\r\n            </div>\r\n          ) : null}\r\n          {/* {isSpeaking ? <BigTranscript /> : \"Start adding transactions\"} */}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <FormControl fullWidth>\r\n          <InputLabel>Type</InputLabel>\r\n          <Select\r\n            value={formData.type}\r\n            onChange={(e) => setFormData({ ...formData, type: e.target.value })}\r\n          >\r\n            <MenuItem value=\"Income\">Income</MenuItem>\r\n            <MenuItem value=\"Expense\">Expense</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <FormControl fullWidth>\r\n          <InputLabel>Category</InputLabel>\r\n          <Select\r\n            value={formData.category}\r\n            onChange={(e) =>\r\n              setFormData({ ...formData, category: e.target.value })\r\n            }\r\n          >\r\n            {selectedCategories.map((c) => (\r\n              <MenuItem key={c.type} value={c.type}>\r\n                {c.type}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n\r\n        <Typography style={{ marginLeft: 7, color: \"red\", fontSize: \"12px\" }}>\r\n          {catText}\r\n        </Typography>\r\n      </Grid>\r\n\r\n      <Grid item xs={6}>\r\n        <TextField\r\n          type=\"text\"\r\n          label=\"Amount\"\r\n          value={formData.amount}\r\n          onChange={(e) => amountFun(e.target.value)}\r\n          fullWidth\r\n        />\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <TextField\r\n          fullWidth\r\n          label=\"Date\"\r\n          type=\"date\"\r\n          value={formData.date}\r\n          onChange={(e) =>\r\n            setFormData({ ...formData, date: formatDate(e.target.value) })\r\n          }\r\n        />\r\n      </Grid>\r\n      <Typography style={{ marginLeft: 7, color: \"red\", fontSize: \"12px\" }}>\r\n        {errorText}\r\n      </Typography>\r\n      <Button\r\n        className={classes.button}\r\n        variant=\"outlined\"\r\n        color=\"primary\"\r\n        fullWidth\r\n        onClick={createTransaction}\r\n      >\r\n        Create\r\n      </Button>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default NewTransactionForm;\r\n"]},"metadata":{},"sourceType":"module"}